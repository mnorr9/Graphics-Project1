Computer Graphics -- Fall 2013

WoW 4
http://elvis.rowan.edu/~taggar17/SEGV/Papers/WoW4.doc
 


Problem 1
(35 points)

Weiler-Atherton 2D clipping

Shown below are a subject-polygon (SP) and a clip-polygon (CP). Also shown are 
some points, namely, a through y, on the SP.


a) (5 points) Show the clipped SP obtained by clipping it with the CP, using 
the Weiler-Atherton polygon-clipping algorithm.


b) (15 points) Show the contents of the stack after each â€œinterestingâ€� event. 
Recall that an interesting event occurs when we hit the CP while traversing 
the SP, or when we hit the SP, while traversing the CP. Assume that you start 
traversing the SP in clockwise order at Point a, and the first edge traversed 
is ab.

********************************************************
	Nacer 
********************************************************

1. Interesting event: SP intersects CP at point 'b'
	a. continue on SP.

2. Interesting event: SP intersects CP at point 'c'
    	a. Push 'c';  [c]
	b. continue on CP. 

3. Interesting event: CP intersects SP at point 'e'
	a. Push 'e';  [e, c] 
	b. continue on SP.
	
4. Interesting event: SP intersects CP at point 'f'
	a. Push 'f';  [f,e,c]
	b. continue on CP.
	
	 
5. Interesting event: CP intersects SP at point 'b'
	a. 'b' already visited.
	b. Pop 'f' ;  [e,c]
	c. continue on CP.
	
			
6. Interesting event: CP intersects SP at point 'h'
 	a. continue on SP.
	
	
7. Interesting event: SP intersects CP at point 'i'
	a. Push 'i'; [i,e,c]		
	b. continue on CP.
	
	
8. Interesting event: CP intersects SP at point 'k'
	a. Push 'k'; [k,i,e,c]
	b. continue on SP.
	
	
9. Interesting event: SP intersects CP at point 'l'
	a. Push 'l'; [l,k,i,e,c]
	b. continue on CP.
	
	
10. Interesting event: CP intersects SP at point 'h'
	a. 'h' already visited.
	b. Pop 'l'; [k,i,e,c]
	c. continue on CP.
	
	
11. Interesting event: CP intersects SP at point 'n'
	a. continue on SP.
	
	
12. Interesting event: SP intersects CP at point 'o'
	a. Push 'o'; [o,k,i,e,c]
	b. continue on CP.
	
		
13. Interesting event: CP intersects SP at point 'x'
	a. Push 'x'; [x,o,k,i,e,c]
	b. continue on SP.
	
	
14. Interesting event: SP intersects CP at point 'y'
	a. Push 'y'; [y,x,o,k,i,e,c]
	b. continue on CP
	
	
	
15. Interesting event: CP intersects SP at point 'n'
	a. 'n' already visited
	b. Pop 'y'; [x,o,k,i,e,c]
	c. continue on  SP
	
16. Stuck (y --> a). 
	a. 'a' already visited
	b. Pop 'x'; [o,k,i,e,c] 
17. Stuck (x --> y)
	a. 'y' already visited
	b. Pop 'o'; [k,i,e,c]
	c. continue on SP
18. o --> p
19. p --> q

20. Interesting event: SP intersects CP at point 'r'
	a. continue on SP
	b. r --> s
	
21. Interesting event: SP intersects CP at point 't'
	a. Push 't'; [t,k,i,e,c]
	b. continue on CP
	
	
22. Interesting event : CP intersects SP at point 'r'
	a. 'r' already visited
	b. Pop 't'; [k,i,e,c]
	c. follow along SP
23. t --> u 
24. u --> v
24. v --> w
25  Interesting event: SP intersects CP at point 'x'
	a. 'x' already visited
	b. Pop 'k; [i,e,c]
	c. 'k' already visited
	d. Pop 'i'; [e,c]
	e. 'i' already visited
	f. Pop 'e'; [c]
	g. 'e' already visited
	h. Pop 'c'; []
	i. 'c' already visited
	

********************************************************
	Rick (think I typed all that in correctly)
********************************************************

1.  Interesting event: SP intersects CP at 'b'
	a. Continue on SP
2.  At 'c' we try to exit CP
	a. Push 'c': [c]
	b. Go along CP in CW direction
3.  At 'e' we reach SP again
	a. Continue on SP in CW direction
4.  At 'f' we try to exit CP
	a. Push 'f': [f,c]
	b. Go along CP in CW direction
5.  We reach 'b' and are stuck
	a. Pop 'f': [c]
	b. Go along SP from 'f' in CW direction
6.  At 'h', SP intersects CP
	a. Continue on SP
7.  At 'i' we try to exit CP
	a. Push 'i': [i,c]
	b. Go along CP in CW direction
8.  At 'k' we reach SP again
	a. Continue on SP in CW direction
9.  At 'l' we try to exit CP
	a. Push 'l': [l,i,c]
	b. Go along CP in CW direction
10. We reach 'h' and are stuck
	a. Pop 'l': [i,c]
	b. Go along SP from 'l' in CW direction
11. At 'm', continue on SP
12. At 'n', SP intersects CP
	a. Continue on SP
13. At 'o' we try to exit CP
	a. Push 'o': [o,i,c]
	b. Go along CP in CW direction
14. We reach 'k' and are stuck
	a. Pop 'o': [i,c]
	b. Go along SP from 'o' in CW direction
15. At 'p', continue on SP
16. At 'q', continue on SP
17. At 'r', SP intersects CP
	a. Continue on SP
18. At 's', SP intersects CP
	a. Continue on SP
19. At 't' we try to exit CP
	a. Push 't': [t,i,c]
	b. Go along CP in CW direction
20. We reach 'r' and are stuck
	a. Pop 't': [i,c]
	b. Go along SP from 't' in CW direction
21. At 'u', continue on SP
22. At 'v', continue on SP
23. At 'w', continue on SP
24. At 'x', SP intersects CP
	a. Continue on SP
25. At 'y' we try to exit CP
	a. Push 'y': [y,i,c]
	b. Go along CP in CW direction
26. We reach 'n' and are stuck
	a. Pop 'y': [i,c]
	b. Go along SP from 'y' in CW direction
27. We reach 'a' and are stuck
	a. Pop 'i': [c]
	b. Go along SP from 'i' in CW direction
28. At 'j', continue on SP
29. We reach 'k' and are stuck
	a. Pop 'c': [] (empty)
	b. Go along SP from 'c' in CW direction
30. At 'd', continue on SP
31. We reach 'e' and are stuck
	a. Stack is empty - STOP

********************************************************


Problem 2
(30 points)

Sutherland-Hodgeman 2D clipping

A polygon is usually represented with a vertex list such that its edges connect
adjacent vertices in the vertex list. For example, the polygon shown below with
solid lines is represented as a vertex list V = {a, b, c, d, e, f, g} and its 
list of edges is E = {ab, bc, cd, de, ef, fg, ga}.

c) (15 points) For the polygon clip rectangle configuration given below (clip 
rectangle shown by dashed edges), show the updated list of edges E and the 
updated list of vertices V, after each clipping with the left boundary, right 
boundary, bottom boundary, and top boundary, in this order, using 
Sutherland-Hodgeman polygon-clipping algorithm. Show all your work.

Left:
	V = {H, B, I, J, D, K, E, F}
	E = {HB, BI, JD, DE, EF, FK, KJ, HI}
Right:
	V = {H, B, I, J, K, D, E, L, M}
	E = {HB, BI, JD, DE, EL, LM, MK, KJ, HI}
Bottom:
	V = {H, B, I, N, O, L, E}
	E = {HB, BI, NE, EL, LO, ON, HI}
Top:
	Nothing to clip

d) (5 points) Show the clipped polygon obtained by clipping it with the clipping 
window, using the Sutherland-Hodgeman polygon-clipping algorithm.



 
 


Problem 3
(35 points)

Liang-Barsky 2D clipping

Show step by step how Liang-Barsky algorithm would process the line (P1,P2) in 
the example below.


xl = Left boundary
xr = Right boundary
yt = Top boundary
yb = Bottom boundary

A point is in the clip window if
================================
xl <= (x1 + u(x2 - x1))  <= xr
yb <= (y1 + u(y2 - y1))  <= yt

0 <= u <= 1

which can be expressed as the 4 inequalities
=============================================
upk <= qk ; where k = 1 (left side), 2 (right side), 3 (bottom side), 4 (top side)

p1 = - (x2 - x1), q1 = (x1 - xl) -- Left Boundary
p2 =   (x2 - x1), q2 = (xr - x1) -- Right Boundary
p3 = - (y2 - y1), q3 = (y1 - yb) -- Bottom Boundary
p4 =   (y2 - y1), q4 = (yt - y1) -- Top Boundary

//DFG
//I don't think we need to estimate any values for x/y.
//  we should be able to simplify the above a little more.
//  Not sure what it is though.

xl = 0;
xr = 10;
yb = 0;
yt = 10;

assuming
=================
x1 = -10
x2 =   4
y1 =   5
y2 =  -5

Left Edge Testing
===============================
p1 = - ((4)  - (-10)) = -14; 
q1 = (-10 - 0)   = -10
q1 < 0 ; the line is completely outside the left boundary
         and can be eliminated from further consideration.
r = q1 / p1; = 0.71
u = r; 

